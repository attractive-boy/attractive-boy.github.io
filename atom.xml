<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IDGI</title>
  
  <subtitle>Follow Back</subtitle>
  <link href="http://attractive-boy.github.io/atom.xml" rel="self"/>
  
  <link href="http://attractive-boy.github.io/"/>
  <updated>2022-08-06T13:33:43.523Z</updated>
  <id>http://attractive-boy.github.io/</id>
  
  <author>
    <name>attractiveboy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git commit 提交规范</title>
    <link href="http://attractive-boy.github.io/2022/08/06/git-commit-%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/"/>
    <id>http://attractive-boy.github.io/2022/08/06/git-commit-%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/</id>
    <published>2022-08-06T12:29:39.000Z</published>
    <updated>2022-08-06T13:33:43.523Z</updated>
    
    <content type="html"><![CDATA[<p>转载于:<a href="https://developer.aliyun.com/article/645092#:~:text=Git%E6%8F%90%E4%BA%A4%E4%B9%9F%E6%9C%89%E5%85%B6%E8%A7%84%E8%8C%83%EF%BC%8C%E4%B8%9A%E5%86%85%E5%81%9A%E7%9A%84%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9A%84%EF%BC%8C%E6%AF%94%E8%BE%83%E5%85%B7%E6%9C%89%E5%8F%82%E8%80%83%E4%BB%B7%E5%80%BC%E7%9A%84%E5%B0%B1%E6%98%AFAngular%E7%9A%84%E6%8F%90%E4%BA%A4%E3%80%82%20Angular%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83%3A%20%28%29%3A%20%23header%20%2F%2F,%E7%A9%BA%E4%B8%80%E8%A1%8C%20%2F%2F%20%E7%A9%BA%E4%B8%80%E8%A1%8C%20%E6%A0%BC%E5%BC%8F%E8%AE%B2%E8%A7%A3%20Header%20Header%E9%83%A8%E5%88%86%E5%8F%AA%E6%9C%89%E4%B8%80%E8%A1%8C%EF%BC%8C%E5%8C%85%E6%8B%AC%E4%B8%89%E4%B8%AA%E5%AD%97%E6%AE%B5%EF%BC%9Atype%EF%BC%88%E5%BF%85%E9%9C%80%EF%BC%89%E3%80%81scope%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89%E5%92%8Csubject%EF%BC%88%E5%BF%85%E9%9C%80%EF%BC%89%E3%80%82">阿里云开发者社区</a></p><pre><code>简介： 自古至今，无规矩不成方圆。 Git提交也有其规范，业内做的比较好的，比较具有参考价值的就是Angular的提交。 Angular提交规范: (): #header // 空一行 // 空一行 格式讲解 Header Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</code></pre><span id="more"></span><p>自古至今，无规矩不成方圆。</p><p>Git提交也有其规范，业内做的比较好的，比较具有参考价值的就是Angular的提交。</p><p>Angular提交规范:</p><pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; #header// 空一行&lt;body&gt;// 空一行&lt;footer&gt; </code></pre><h2 id="格式讲解"><a href="#格式讲解" class="headerlink" title="格式讲解"></a>格式讲解</h2><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p><p>总的来说，关键就是header这部分，至于<body>和<footer>可省略</p><p>例如:</p><pre><code>feat:新增财务报表</code></pre><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>用于说明本次commit的类别，只允许使用下面7个标识</p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul><p>注意:如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p><h4 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h4><p>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><h4 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h4><p>是 commit 目的的简短描述，不超过50个字符。</p><pre><code>以动词开头，使用第一人称现在时，比如change，而不是changed或changes第一个字母小写结尾不加句号（.）</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;转载于:&lt;a href=&quot;https://developer.aliyun.com/article/645092#:~:text=Git%E6%8F%90%E4%BA%A4%E4%B9%9F%E6%9C%89%E5%85%B6%E8%A7%84%E8%8C%83%EF%BC%8C%E4%B8%9A%E5%86%85%E5%81%9A%E7%9A%84%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9A%84%EF%BC%8C%E6%AF%94%E8%BE%83%E5%85%B7%E6%9C%89%E5%8F%82%E8%80%83%E4%BB%B7%E5%80%BC%E7%9A%84%E5%B0%B1%E6%98%AFAngular%E7%9A%84%E6%8F%90%E4%BA%A4%E3%80%82%20Angular%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83%3A%20%28%29%3A%20%23header%20%2F%2F,%E7%A9%BA%E4%B8%80%E8%A1%8C%20%2F%2F%20%E7%A9%BA%E4%B8%80%E8%A1%8C%20%E6%A0%BC%E5%BC%8F%E8%AE%B2%E8%A7%A3%20Header%20Header%E9%83%A8%E5%88%86%E5%8F%AA%E6%9C%89%E4%B8%80%E8%A1%8C%EF%BC%8C%E5%8C%85%E6%8B%AC%E4%B8%89%E4%B8%AA%E5%AD%97%E6%AE%B5%EF%BC%9Atype%EF%BC%88%E5%BF%85%E9%9C%80%EF%BC%89%E3%80%81scope%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89%E5%92%8Csubject%EF%BC%88%E5%BF%85%E9%9C%80%EF%BC%89%E3%80%82&quot;&gt;阿里云开发者社区&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;简介： 自古至今，无规矩不成方圆。 
Git提交也有其规范，业内做的比较好的，比较具有参考价值的就是Angular的提交。 
Angular提交规范: (): #header // 空一行 // 空一行 格式讲解 Header Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="git" scheme="http://attractive-boy.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Angular 自定义 WebPack</title>
    <link href="http://attractive-boy.github.io/2022/07/28/Angular-%E8%87%AA%E5%AE%9A%E4%B9%89-WebPack/"/>
    <id>http://attractive-boy.github.io/2022/07/28/Angular-%E8%87%AA%E5%AE%9A%E4%B9%89-WebPack/</id>
    <published>2022-07-28T14:02:33.000Z</published>
    <updated>2022-07-29T01:39:36.107Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Angular-Cli-6-以后禁用了-webpack-的自定义配置，官方似乎并未提供自定义配置-Webpack-的方法。"><a href="#Angular-Cli-6-以后禁用了-webpack-的自定义配置，官方似乎并未提供自定义配置-Webpack-的方法。" class="headerlink" title="Angular Cli 6 以后禁用了 webpack 的自定义配置，官方似乎并未提供自定义配置 Webpack 的方法。"></a>Angular Cli 6 以后禁用了 webpack 的自定义配置，官方似乎并未提供自定义配置 Webpack 的方法。</h3><span id="more"></span><h3 id="要自定义-Webpack-需要引入第三方库（以-Angular-13-为例）"><a href="#要自定义-Webpack-需要引入第三方库（以-Angular-13-为例）" class="headerlink" title="要自定义 Webpack 需要引入第三方库（以 Angular 13 为例）"></a>要自定义 Webpack 需要引入第三方库（以 Angular 13 为例）</h3><h2 id="安装-angular-builders-x2F-custom-webpack"><a href="#安装-angular-builders-x2F-custom-webpack" class="headerlink" title="安装 angular-builders&#x2F;custom-webpack"></a>安装 angular-builders&#x2F;custom-webpack</h2><p><code>npm i @angular-builders/custom-webpack@13</code></p><h2 id="在-angular-json-中-修改-builder-和-customWebpackConfig"><a href="#在-angular-json-中-修改-builder-和-customWebpackConfig" class="headerlink" title="在 angular.json 中 修改 builder 和 customWebpackConfig"></a>在 angular.json 中 修改 builder 和 customWebpackConfig</h2><pre><code>    &quot;projects&quot;: &#123;        &quot;architect&quot;: &#123;            &quot;build&quot;: &#123;                &quot;builder&quot;: &quot;@angular-builders/custom-webpack:browser&quot;,                &quot;options&quot;: &#123;                    &quot;customWebpackConfig&quot;: &#123;                        &quot;path&quot;: &quot;./webpack.config.js&quot;                    &#125;                &#125;            &#125;        &#125;    &#125;</code></pre><h2 id="然后在项目根目录添加-webpack-config-js"><a href="#然后在项目根目录添加-webpack-config-js" class="headerlink" title="然后在项目根目录添加 webpack.config.js"></a>然后在项目根目录添加 webpack.config.js</h2><pre><code>    module.exports=&#123;        devtool:&#39;source-map&#39;,        optimization:&#123;            minimize:false        &#125;    &#125;</code></pre><h2 id="接着在命令行使用ng-build打包就可以看到没有压缩的js代码了"><a href="#接着在命令行使用ng-build打包就可以看到没有压缩的js代码了" class="headerlink" title="接着在命令行使用ng build打包就可以看到没有压缩的js代码了"></a>接着在命令行使用<code>ng build</code>打包就可以看到没有压缩的js代码了</h2>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Angular-Cli-6-以后禁用了-webpack-的自定义配置，官方似乎并未提供自定义配置-Webpack-的方法。&quot;&gt;&lt;a href=&quot;#Angular-Cli-6-以后禁用了-webpack-的自定义配置，官方似乎并未提供自定义配置-Webpack-的方法。&quot; class=&quot;headerlink&quot; title=&quot;Angular Cli 6 以后禁用了 webpack 的自定义配置，官方似乎并未提供自定义配置 Webpack 的方法。&quot;&gt;&lt;/a&gt;Angular Cli 6 以后禁用了 webpack 的自定义配置，官方似乎并未提供自定义配置 Webpack 的方法。&lt;/h3&gt;</summary>
    
    
    
    
    <category term="angular" scheme="http://attractive-boy.github.io/tags/angular/"/>
    
    <category term="webpack" scheme="http://attractive-boy.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>nzdata存在数据时显示暂无数据</title>
    <link href="http://attractive-boy.github.io/2022/06/20/nzdata%E5%AD%98%E5%9C%A8%E6%95%B0%E6%8D%AE%E6%97%B6%E6%98%BE%E7%A4%BA%E6%9A%82%E6%97%A0%E6%95%B0%E6%8D%AE/"/>
    <id>http://attractive-boy.github.io/2022/06/20/nzdata%E5%AD%98%E5%9C%A8%E6%95%B0%E6%8D%AE%E6%97%B6%E6%98%BE%E7%A4%BA%E6%9A%82%E6%97%A0%E6%95%B0%E6%8D%AE/</id>
    <published>2022-06-20T13:29:59.000Z</published>
    <updated>2022-12-05T13:56:51.134Z</updated>
    
    <content type="html"><![CDATA[<p>在nztable中设置nzdata时，当我往nzdata数组中添加数据之后，下方会有暂无数据的图标，如何去掉这个图标？</p><span id="more"></span><p>新增一条数据通过<code>push()</code>的方式往数组中添加一条数据使得表单中多了一条数据，但有数据后下面还是有暂无数据的图标。<br>通过查阅Angular的文档后发现：<br>angular实现视图与模型的双向数据绑定是通过变化监测来实现的，当监测到数据变化时，angular会执行轮询来找到那个变化的数据并将他更新到模型或者视图中。<br>在js中，数组是引用类型的数据，如果对数组使用<code>push()</code>方法，他改变的是数组的原始数组，而数组的引用值不会发生变化，但是，angular监听数据变化用的是<code>onchanges()</code>方法，这个方法监听的是数据的引用值，当数据的原始值改变而引用值不改变时，不会触发这个生命周期钩子。<br>所以我们只需要在push数据之后，增加一行代码：</p><pre><code>this.fs.er.itemInfo = [...this.fs.er.itemInfo];</code></pre><p>对自身进行解构赋值，从而触发angular的<code>onchanges()</code>钩子，让他去更新视图层，从而让nztable知道他的data值发生变化，将暂无数据隐藏。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在nztable中设置nzdata时，当我往nzdata数组中添加数据之后，下方会有暂无数据的图标，如何去掉这个图标？&lt;/p&gt;</summary>
    
    
    
    
    <category term="angular" scheme="http://attractive-boy.github.io/tags/angular/"/>
    
    <category term="nztable" scheme="http://attractive-boy.github.io/tags/nztable/"/>
    
  </entry>
  
  <entry>
    <title>焦点轮播图</title>
    <link href="http://attractive-boy.github.io/2021/08/21/%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    <id>http://attractive-boy.github.io/2021/08/21/%E8%BD%AE%E6%92%AD%E5%9B%BE/</id>
    <published>2021-08-21T15:25:37.000Z</published>
    <updated>2022-12-05T13:55:26.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote><p>本方法基于bootstrap，首先需要引入<a href="https://github.com/twbs/bootstrap/releases/download/v4.6.0/bootstrap-4.6.0-dist.zip">bootstrap4</a>，然后在需要使用bootstrap样式和方法的元素用一个<code>&lt;div class=&quot;container&quot;&gt;&lt;/div&gt;</code>包裹起来。</p></blockquote><span id="more"></span><h3 id="图片切换"><a href="#图片切换" class="headerlink" title="图片切换"></a>图片切换</h3><pre><code>&lt;div class=&quot;carousel&quot;&gt;    &lt;div class=&quot;carousel-inner&quot;&gt;        &lt;div class=&quot;carousel-item&quot;&gt;            &lt;img src=&quot;...&quot; alt=&quot;...&quot;&gt;        &lt;/div&gt;        ...    &lt;/div&gt;&lt;div&gt;</code></pre><p> 其中</p><ol><li><code>carousel</code>的css样式为：</li></ol><pre><code>.carousel&#123;    position: relative;&#125;</code></pre><p>作为整个轮播图的相对定位。</p><ol start="2"><li><code>carousel-inner</code>的css样式为：</li></ol><pre><code>.carousel-inner &#123;  position: relative;  width: 100%;  overflow: hidden;&#125;</code></pre><p><code>overflow</code>溢出隐藏，并且也做了相对定位，宽度为父元素的100%。</p><ol start="3"><li><code>carousel-item</code>的css样式为：</li></ol><pre><code>.carousel-item &#123;  position: relative;  display: none;  float: left;  width: 100%;  margin-right: -100%;  -webkit-backface-visibility: hidden;  backface-visibility: hidden;  transition: -webkit-transform 0.6s ease-in-out;  transition: transform 0.6s ease-in-out;  transition: transform 0.6s ease-in-out, -webkit-transform 0.6s ease-in-out;&#125;</code></pre><p><code>display: none</code>每张图片都进行了隐藏。</p><blockquote><p>要让图片显示，需要给首页<strong>第一张</strong>显示的图片设置<code>class=&quot;active&quot;</code>属性</p></blockquote><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>给最外层的<code>&lt;div class=&quot;carousel&quot; &gt;&lt;/div&gt;</code>添加一个事件<code>data-ride=&quot;carousel&quot;</code>此时轮播图可以隔一段时间自己轮换照片。</p><h3 id="左右箭头"><a href="#左右箭头" class="headerlink" title="左右箭头"></a>左右箭头</h3><pre><code>&lt;a href=&quot;&quot; class=&quot;carousel-control-next&quot;&gt;&lt;/a&gt;&lt;a href=&quot;&quot; class=&quot;carousel-control-prev&quot;&gt;&lt;/a&gt;</code></pre><p><code>carousel-control-next</code>和<code>carousel-control-prev</code>的css代码为：</p><pre><code>.carousel-control-prev,.carousel-control-next &#123;  position: absolute;  top: 0;  bottom: 0;  z-index: 1;  display: -ms-flexbox;  display: flex;  -ms-flex-align: center;  align-items: center;  -ms-flex-pack: center;  justify-content: center;  width: 15%;  color: #fff;  text-align: center;  opacity: 0.5;  transition: opacity 0.15s ease;&#125;</code></pre><p>绝对定位，位于轮播图的一左一右。</p><p>此时我们还看不到任何效果，需要添加两个小箭头。</p><pre><code>&lt;span class=&quot;carousel-control-next-icon&quot;&gt;&lt;/span&gt;&lt;span class=&quot;carousel-control-prev-icon&quot;&gt;&lt;/span&gt;</code></pre><p>将这两个按钮添加到<code>&lt;a&gt;&lt;/a&gt;</code>中。</p><p>此时这两个小箭头还没有任何作用，此时添加事件:</p><pre><code>&lt;a data-slide=&quot;next&quot; href=&quot;#change&quot;...&gt;&lt;/a&gt;&lt;a data-slide=&quot;prev&quot; href=&quot;#change&quot;...&gt;&lt;/a&gt;</code></pre><p>给最外层carousel添加一个<code>id = &quot;change&quot;</code>表示箭头改变的是他的图案。</p><p>效果完成，点击箭头可实现图片转换。</p><h3 id="轮播指示器"><a href="#轮播指示器" class="headerlink" title="轮播指示器"></a>轮播指示器</h3><p>轮播指示器采用列表。</p><pre><code>&lt;ul class=&quot;carousel-indicators&quot;&gt;&lt;/ul&gt;</code></pre><p><code>carousel</code>的css样式为：</p><pre><code>.carousel-indicators &#123;  position: absolute;  right: 0;  bottom: 0;  left: 0;  z-index: 15;  display: -ms-flexbox;  display: flex;  -ms-flex-pack: center;  justify-content: center;  padding-left: 0;  margin-right: 15%;  margin-left: 15%;  list-style: none;&#125;</code></pre><p>弹性，x轴主轴，主轴居中显示，绝对定位</p><p>然后添加四个<code>&lt;li&gt;&lt;/li&gt;</code>,不需要写样式，由<code>carousel-indicators</code>直接控制。</p><pre><code>.carousel-indicators li &#123;  box-sizing: content-box;  -ms-flex: 0 1 auto;  flex: 0 1 auto;  width: 30px;  height: 3px;  margin-right: 3px;  margin-left: 3px;  text-indent: -999px;  cursor: pointer;  background-color: #fff;  background-clip: padding-box;  border-top: 10px solid transparent;  border-bottom: 10px solid transparent;  opacity: .5;  transition: opacity 0.6s ease;&#125;</code></pre><h4 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h4><p>让每个<code>&lt;li&gt;</code> 可以被点击应该添加<code>data-slide-to=&quot;num&quot;</code>其中num是<code>&lt;li&gt;</code>的图片编号（0开始）同时添加一个属性<code>data-target=&quot;#change&quot;</code>表示点击之后改变的轮播图。</p><blockquote><p>要使当时被选中的指示器颜色改变需要给<strong>第一个</strong><code>&lt;li&gt;&lt;/li&gt;</code>添加<code>class=&quot;active&quot;</code></p></blockquote><p>至此轮播图<del>制作成功</del>，还需重写自己觉得不美观的css样式。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本方法基于bootstrap，首先需要引入&lt;a href=&quot;https://github.com/twbs/bootstrap/releases/download/v4.6.0/bootstrap-4.6.0-dist.zip&quot;&gt;bootstrap4&lt;/a&gt;，然后在需要使用bootstrap样式和方法的元素用一个&lt;code&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;包裹起来。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="CSS" scheme="http://attractive-boy.github.io/tags/CSS/"/>
    
    <category term="HTML" scheme="http://attractive-boy.github.io/tags/HTML/"/>
    
    <category term="jQuery" scheme="http://attractive-boy.github.io/tags/jQuery/"/>
    
  </entry>
  
</feed>
